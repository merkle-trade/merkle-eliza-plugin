{"version":3,"sources":["../src/actions/openOrder.ts","../src/types.ts","../src/service.ts","../src/utils.ts","../src/actions/fullyClosePosition.ts","../src/actions/getOrder.ts","../src/actions/getPosition.ts","../src/actions/getBalance.ts","../src/actions/getPrice.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger, generateObjectDeprecated } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\ttype Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport type {\n\tCommittedTransactionResponse,\n\tPendingTransactionResponse,\n} from \"@aptos-labs/ts-sdk\";\nimport { OpenOrderSchema } from \"../types\";\nimport { checkEnv, newMerkleService } from \"../utils\";\n\nconst openOrderTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"coinSymbol\": \"BTC\",\n    \"pay\": 1000,\n    \"leverage\": 10,\n    \"side\": \"LONG\",\n    \"type\": \"MARKET\"\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n    \"coinSymbol\": \"BTC\",\n    \"pay\": 1000,\n    \"leverage\": 10,\n    \"side\": \"SHORT\",\n    \"type\": \"LIMIT\",\n    \"limitOrderPrice\": 98000\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested futures position order:\n- coinSymbol : Coin symbol (Must be a valid coin symbol, Must be provided by the user)\n- pay : Pay amount (Must be a number, Must be provided by the user)\n- leverage : Leverage (Must be 3 to 1000, Must be provided by the user)\n- type : Type of order (Must be \"MARKET\" or \"LIMIT\")\n- side : Side of the position (Must be \"LONG\" or \"SHORT\", Must be provided by the user)\n- limitOrderPrice : Limit order price (Must be a number, optional)\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n\tname: \"OPEN_ORDER\",\n\tsimiles: [\n    \"FUTURES_TRADE\",\n    \"OPEN_MARKET_ORDER\",\n\t\t\"OPEN_LIMIT_ORDER\",\n\t\t\"BUY_LONG\",\n\t\t\"BUY_SHORT\",\n\t\t\"OPEN_POSITION\",\n\t\t\"PLACE_ORDER\",\n\t],\n\tdescription: \"Open a futures position on the Merkle Trade platform\",\n\texamples: [\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully market order BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523\",\n\t\t\t\t\taction: \"OPEN_ORDER\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n    [\n\t\t\t{\n\t\t\t\tuser: \"{{user}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Buy a BTC on the Merkle Trade platform with 100 pay and 100 leverage\",\n\t\t\t\t},\n\t\t\t},\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Is it a long position or a short position?\"\n        },\n      },\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Short Position\"\n        },\n      },\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully open short position BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523\",\n\t\t\t\t\taction: \"OPEN_ORDER\",\n\t\t\t\t},\n\t\t\t},\n    ],\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage at 98000\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Successfully limit order BTC at 98000 with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523\",\n          action: \"OPEN_ORDER\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Execute a ETH limit order on the Merkle Trade platform with 1000 pay and 10 leverage at 98000\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Is it a long position or a short position?\"\n        },\n      },\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Long Position\"\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Successfully limit long order ETH at 98000 with 1000 pay, 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523\",\n          action: \"OPEN_ORDER\",\n        },\n      },\n    ]\n\t] as ActionExample[][],\n\tvalidate: async (runtime: IAgentRuntime) => {\n\t\treturn checkEnv(runtime);\n\t},\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    let content: any;\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const context = composeContext({\n        state: currentState,\n        template: openOrderTemplate,\n      });\n\n      content = await generateObjectDeprecated({\n        runtime,\n        context: context,\n        modelClass: ModelClass.LARGE,\n      });\n\n      if (content && typeof content.pay === \"string\") {\n        content.pay = Number.parseFloat(content.pay);\n      }\n      if (content && typeof content.leverage === \"string\") {\n        content.leverage = Number.parseFloat(content.leverage);\n      }\n      if (content && typeof content.side === \"string\") {\n        switch (content.side.toUpperCase()) {\n          case \"LONG\":\n            content.side = \"LONG\";\n            break;\n          case \"SHORT\":\n            content.side = \"SHORT\";\n            break;\n          default:\n            throw new Error(\"Must be provide a valid side. Long or Short\");\n        }\n      }\n      if (content && typeof content.type === \"string\") {\n        switch (content.type.toUpperCase()) {\n          case \"MARKET\":\n            content.type = \"MARKET\";\n            break;\n          case \"LIMIT\":\n            content.type = \"LIMIT\";\n            break;\n          default:\n            throw new Error(\"Invalid type\");\n        }\n      }\n      if (content && typeof content.limitOrderPrice === \"string\") {\n        content.limitOrderPrice = content.limitOrderPrice === \"null\" ? null : Number.parseFloat(content.limitOrderPrice);\n      }\n\n      const parseResult = OpenOrderSchema.safeParse(content);\n      if (!parseResult.success) {\n        throw new Error(\n          `Invalid open order content:\\n${JSON.stringify(content, null, 2)}\\n${JSON.stringify(parseResult.error.errors, null, 2)}`\n        );\n      }\n\n      const merkleService = await newMerkleService(runtime)\n\n      let tx: PendingTransactionResponse | CommittedTransactionResponse;\n      if (content && typeof content.type === \"string\" && content.type === \"LIMIT\") {\n        tx = await merkleService.placeLimitOrder({\n          pair: content.coinSymbol,\n          pay: content.pay,\n          leverage: content.leverage,\n          isLong: content.side === \"LONG\",\n          limitOrderPrice: content.limitOrderPrice,\n        })\n        if (callback) {\n          callback({\n            text: `Successfully limit order ${content.coinSymbol} at ${content.limitOrderPrice} with ${content.pay} pay, ${content.leverage} leverage, and ${content.side} position, Transaction: ${tx.hash}`,\n            content: tx,\n          });\n        }\n      } else {\n        tx = await merkleService.placeMarketOrder({\n          pair: content.coinSymbol,\n          pay: content.pay,\n          leverage: content.leverage,\n          isLong: content.side === \"LONG\",\n        })\n\n        if (callback) {\n          callback({\n            text: `Successfully market order ${content.coinSymbol} with ${content.pay} pay, ${content.leverage} leverage, and ${content.side} position, Transaction: ${tx.hash}`,\n            content: tx,\n          });\n        }\n      }\n\n      elizaLogger.log(\"Open order successful:\", tx.hash);\n      return true;\n    } catch (error) {\n      elizaLogger.error(\"Error during open order:\", {\n        content,\n        message: error.message,\n      });\n      if (callback) {\n        callback({\n          text: `Error during open order: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n\t},\n} as Action;\n","import { z } from \"zod\";\n\nexport const OpenOrderSchema = z.object({\n\tcoinSymbol: z.string().toUpperCase(),\n\tpay: z.number(),\n\tleverage: z.number(),\n\ttype: z.enum([\"MARKET\", \"LIMIT\"]),\n\tside: z.enum([\"LONG\", \"SHORT\"]),\n  limitOrderPrice: z.number().optional().nullable(),\n});\n\nexport const FullyClosePositionSchema = z.object({\n  coinSymbol: z.string().toUpperCase(),\n  side: z.enum([\"LONG\", \"SHORT\"]),\n});\n\nexport const GetPriceSchema = z.object({\n  coinSymbol: z.string().toUpperCase(),\n});\n","import { type Account, Aptos, type CommittedTransactionResponse } from \"@aptos-labs/ts-sdk\";\nimport { elizaLogger } from \"@elizaos/core\";\nimport {\n\tMerkleClient,\n  AptosHelpers,\n\tcalcEntryByPaySize,\n\tfromNumber,\n\tDecimals,\n  raise,\n  type SummaryPair,\n\ttype Summary,\n\ttype MerkleClientConfig,\n  type Position,\n  type Hex,\n  type Order,\n  type WSAPISession,\n} from \"@merkletrade/ts-sdk\";\nimport NodeCache from \"node-cache\";\nimport { firstAsync, sendTransaction, withTimeout } from \"./utils\";\n\nexport class MerkleService {\n\tprivate client: MerkleClient;\n  private aptos: Aptos;\n  private aptosHelper: AptosHelpers;\n  private cache: NodeCache;\n  private cacheKey = \"merkle/provider\";\n\n  private account: Account;\n  private summary: Summary;\n\n\tconstructor(config: MerkleClientConfig, account: Account) {\n\t\tthis.client = new MerkleClient(config);\n\t\tthis.aptosHelper = new AptosHelpers(config);\n\t\tthis.cache = new NodeCache({ stdTTL: 300 });\n    this.account = account;\n    this.summary = config.summary;\n    this.aptos = new Aptos(config.aptosConfig);\n\t}\n\n  /**\n   * Trading operations\n   */\n\n  /**\n   * Place a market order\n   * @param pair string\n   * @param pay number\n   * @param leverage number\n   * @param isLong boolean\n   * @returns Transaction\n   */\n\tasync placeMarketOrder({\n\t\tpair,\n\t\tpay,\n\t\tleverage,\n\t\tisLong,\n\t}: {\n\t\tpair: string;\n\t\tpay: number;\n\t\tleverage: number;\n\t\tisLong: boolean;\n\t}) {\n\t\tconst pairInfo = await this.client.getPairInfo({pairId: pair});\n\t\tconst pairState = await this.client.getPairState({pairId: pair});\n\t\tconst payWithDecimals = fromNumber(pay, Decimals.COLLATERAL);\n\n\t\tconst { collateral, size } = calcEntryByPaySize(\n\t\t\tpayWithDecimals,\n\t\t\tleverage,\n\t\t\tisLong,\n\t\t\tpairInfo,\n\t\t\tpairState,\n\t\t);\n\n    const payload = this.client.payloads.placeMarketOrder({\n      pair: pairInfo.pairType,\n      userAddress: this.getAccountAddress(),\n      sizeDelta: size,\n      collateralDelta: collateral,\n      isLong,\n      isIncrease: true,\n    })\n\n    return await sendTransaction(this.aptos, this.account, payload);\n\t}\n\n  /**\n   * Place a limit order\n   * @param pair string\n   * @param pay number\n   * @param leverage number\n   * @param isLong boolean\n   * @param limitOrderPrice number\n   * @returns Transaction\n   */\n  async placeLimitOrder({\n    pair,\n    pay,\n    leverage,\n    isLong,\n    limitOrderPrice,\n  }: {\n    pair: string;\n    pay: number;\n    leverage: number;\n    isLong: boolean;\n    limitOrderPrice: number;\n  }) {\n    const pairInfo = await this.client.getPairInfo({pairId: pair});\n    const pairState = await this.client.getPairState({pairId: pair});\n    const payWithDecimals = fromNumber(pay, Decimals.COLLATERAL);\n\n    const { collateral, size } = calcEntryByPaySize(\n      payWithDecimals,\n      leverage,\n      isLong,\n      pairInfo,\n      pairState,\n    );\n\n    const payload = this.client.payloads.placeLimitOrder({\n      pair: pairInfo.pairType,\n      userAddress: this.getAccountAddress(),\n      sizeDelta: size,\n      collateralDelta: collateral,\n      price: fromNumber(limitOrderPrice, Decimals.PRICE),\n      isLong,\n      isIncrease: true,\n    })\n\n    return await sendTransaction(this.aptos, this.account, payload);\n  }\n\n  /**\n   * Close all positions\n   * @returns Transaction[]\n   */\n  async closeAllPositions() {\n    const positions = await this.getPositions();\n    const txs: CommittedTransactionResponse[] = [];\n    for (const position of positions) { \n      const tx = await this.closePosition(position);\n      txs.push(tx);\n    }\n    return txs;\n  }\n\n  /**\n   * Close a position\n   * @param position Position\n   * @returns Transaction\n   */\n  async closePosition(position: Position) {\n    try {\n      const payload = this.client.payloads.placeMarketOrder({\n        pair: position.pairType,\n        userAddress: this.getAccountAddress(),\n        sizeDelta: position.size,\n        collateralDelta: position.collateral,\n        isLong: position.isLong,\n        isIncrease: false,\n      });\n      const tx = await sendTransaction(this.aptos, this.account, payload)\n      return tx;\n    } catch (error) {\n      throw this.handleError(error, \"closePosition\");\n    }\n  }\n\n  /**\n   * Account-related operations\n   */\n\tgetAccount(): Account {\n\t\treturn this.account;\n\t}\n\n  /**\n   * Get account address\n   * @returns Hex\n   */\n\tgetAccountAddress(): Hex {\n\t\treturn this.account.accountAddress.toStringLong();\n\t}\n\n  /**\n   * Get positions of the account\n   * @returns Position[]\n   */\n\tasync getPositions(): Promise<Position[]> {\n    const address = this.getAccountAddress();\n    try {\n      return await this.client.getPositions({address});\n    } catch (error) {\n      throw this.handleError(error, `getPositions: ${address}`);\n    }\n\t}\n\n  /**\n   * Get orders of the account\n   * @returns Order[]\n   */\n\tasync getOrders(): Promise<Order[]> {\n    const address = this.getAccountAddress();\n    try {\n      return await this.client.getOrders({address});\n    } catch (error) {\n      throw this.handleError(error, `getOrders: ${address}`);\n    }\n\t}\n\n  /**\n   * Get balance of the account\n   * @returns AccountBalance\n   */\n\tasync getBalance(): Promise<AccountBalance> {\n    try{\n      const usdcBalance = await this.aptosHelper.getUsdcBalance(this.account);\n      return { usdc: usdcBalance } satisfies AccountBalance;\n    } catch (error) {\n      throw this.handleError(error, \"getBalance\");\n    }\n\t}\n\n  /**\n   * Market-related operations\n   */\n  async getLatestPrice(pair: string) {\n    let session: WSAPISession | undefined;\n    try {\n      const pairInfo = this.getPair(pair);\n      session = await this.client.connectWsApi();\n      await session.connect();\n      const priceFeed = session.subscribePriceFeed(pairInfo.id);\n      const price = await withTimeout(firstAsync(priceFeed), 5000);\n      return price;\n    } catch (error) {\n      throw this.handleError(error, \"getLatestPrice\");\n    } finally {\n      session?.disconnect();\n    }\n  }\n\n  /**\n   * Get summary of the account\n   * @returns SummaryResponse\n   */\n\tasync getSummary() {\n    try {\n      const cachedSummary = this.cache.get<Summary>(`${this.cacheKey}/summary`);\n      if (cachedSummary) {\n        return cachedSummary;\n      }\n      const summary = await this.client.getSummary();\n      this.cache.set(`${this.cacheKey}/summary`, summary);\n      return summary;\n    } catch (error) {\n      throw this.handleError(error, \"getSummary\");\n    }\n\t}\n\n  private getPair(rawPair: string): SummaryPair {\n    return this.summary.pairs.find((pair) => pair.id.toUpperCase().includes(rawPair.toUpperCase())) ?? raise(\"Pair not found\");\n  }\n\n  private handleError(error: unknown, context?: string): never {\n\t\telizaLogger.error(\"Unexpected error: \", { context, error });\n\t\tthrow error;\n\t}\n}\n\nexport type AccountBalance = {\n\tusdc: Decimals.Collateral;\n};\n\nexport default MerkleService;","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { MerkleService } from \"./service\";\nimport { Account, type Aptos, Ed25519PrivateKey, type HexInput, type InputEntryFunctionData, PrivateKey, PrivateKeyVariants } from \"@aptos-labs/ts-sdk\";\nimport { MerkleClientConfig } from \"@merkletrade/ts-sdk\";\n\nexport const checkEnv = (runtime: IAgentRuntime) => {\n  return !!(\n    runtime.getSetting(\"MERKLE_TRADE_APTOS_PRIVATE_KEY\") &&\n    runtime.getSetting(\"MERKLE_TRADE_NETWORK\")\n  );\n};\n\nexport const newMerkleService = async (runtime: IAgentRuntime) => {\n  const network = runtime.getSetting(\"MERKLE_TRADE_NETWORK\")\n  const config = network === \"mainnet\" ? await MerkleClientConfig.mainnet() : await MerkleClientConfig.testnet()\n  const privateKey = runtime.getSetting(\"MERKLE_TRADE_APTOS_PRIVATE_KEY\") as HexInput\n  const merkleAccount = Account.fromPrivateKey({\n    privateKey: new Ed25519PrivateKey(\n      PrivateKey.formatPrivateKey(privateKey, PrivateKeyVariants.Ed25519),\n    ),\n  });\n  const merkleService = new MerkleService(config, merkleAccount)\n  return merkleService\n}\n\nexport const firstAsync = async <T>(iterable: AsyncIterable<T>): Promise<T> => {\n  for await (const value of iterable) {\n    return value;\n  }\n  throw new Error(\"Failed to get value from async iterable\");\n}\n\nexport const withTimeout = <T>(promise: Promise<T>, ms: number): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => reject(new Error(`Timeout: ${ms}ms exceeded`)), ms);\n    promise\n      .then(resolve, reject)\n      .finally(() => clearTimeout(timer));\n  });\n}\n\nexport const sendTransaction = async (aptos: Aptos, account: Account, payload: InputEntryFunctionData) => {\n  const transaction = await aptos.transaction.build.simple({\n    sender: account.accountAddress,\n    data: payload,\n  });\n  const { hash } = await aptos.signAndSubmitTransaction({\n    signer: account,\n    transaction,\n  });\n  return await aptos.waitForTransaction({ transactionHash: hash });\n}\n","import { elizaLogger, generateObjectDeprecated } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\ttype Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { FullyClosePositionSchema } from \"../types\";\nimport { checkEnv, newMerkleService } from \"../utils\";\n\nconst fullyCloseOrderTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"coinSymbol\": \"BTC\",\n    \"side\": \"LONG\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested futures position order:\n- coinSymbol : Coin symbol (Must be a valid coin symbol, Must be provided by the user)\n- side : Side of the position (Must be \"LONG\" or \"SHORT\", Must be provided by the user)\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n  name: \"FULLY_CLOSE_POSITION\",\n  similes: [\"CLOSE_POSITION\"],\n  description: \"Fully close all positions on the Merkle Trade platform\",\n  examples: [\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Close BTC Long position on the Merkle Trade platform\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Successfully close position BTC with LONG position, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523\",\n          action: \"FULLY_CLOSE_POSITION\",\n        },\n      }\n    ]\n  ] as ActionExample[][],\n  validate: async (runtime: IAgentRuntime) => {\n    return checkEnv(runtime);\n  },\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    let content: any;\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const context = composeContext({\n        state: currentState,\n        template: fullyCloseOrderTemplate,\n      });\n\n      content = await generateObjectDeprecated({\n        runtime,\n        context: context,\n        modelClass: ModelClass.LARGE,\n      });\n\n      if (content && typeof content.side === \"string\") {\n        switch (content.side.toUpperCase()) {\n          case \"LONG\":\n            content.side = \"LONG\";\n            break;\n          case \"SHORT\":\n            content.side = \"SHORT\";\n            break;\n          default:\n            throw new Error(\"Invalid side\");\n        }\n      }\n\n      const parseResult = FullyClosePositionSchema.safeParse(content);\n      if (!parseResult.success) {\n        throw new Error(\n          `Invalid open order content: ${JSON.stringify(parseResult.error.errors, null, 2)}`\n        );\n      }\n      const { coinSymbol, side } = parseResult.data\n\n      const merkleService = await newMerkleService(runtime)\n\n      const positions = await merkleService.getPositions()\n      const position = positions.find(p => p.pairType.split(\"::\")[2].includes(coinSymbol.toUpperCase()) && p.isLong === (side === \"LONG\"))\n      if (!position) {\n        throw new Error(`Position not found for ${coinSymbol} with ${side} position`)\n      }\n      const tx = await merkleService.closePosition(position)\n      if (callback) {\n        callback({\n          text: `Successfully close position ${coinSymbol} with ${side} position, Transaction: ${tx.hash}`,\n          content: tx,\n        });\n      }\n      elizaLogger.info(\"Successfully close position\", tx.hash);\n\n      return true\n    } catch (error) {\n      elizaLogger.error(\"Error during fully close position:\", {\n        content,\n        message: error.message,\n      });\n      if (callback) {\n        callback({\n          text: `Error during fully close position: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false\n    }\n  },\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport type{\n\tActionExample,\n\tHandlerCallback,\n\tIAgentRuntime,\n\tMemory,\n\tState,\n\tAction,\n} from \"@elizaos/core\";\nimport { checkEnv, newMerkleService } from \"../utils\";\nimport { toNumber } from \"@merkletrade/ts-sdk\";\n\nexport default {\n  name: \"GET_ORDER\",\n  similes: [\"ORDER\"],\n  description: \"Get the order of the user on the Merkle Trade platform\",\n  examples: [\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Get the order of the user on the Merkle Trade platform\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Orders\\n----------------------------\\nETH (Long, increase) order: 9940.36$ at 2600$\\nBTC (Long, increase) order: 970.87$ at 80000$\",\n          action: \"GET_ORDER\",\n        },\n      }\n    ]\n  ] as ActionExample[][],\n  validate: async (runtime: IAgentRuntime) => {\n    return checkEnv(runtime);\n  },\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const merkleService = await newMerkleService(runtime)\n\n      const orders = await merkleService.getOrders()\n      if (!orders) {\n        throw new Error(\"Orders not found\")\n      }\n\n      const tableData = orders.map(order => [\n        order.pairType.split(\"::\")[2].split(\"_\")[0],\n        order.isLong ? \"Long\" : \"Short\",\n        order.isIncrease ? \"Increase\" : \"Decrease\",\n        toNumber(order.sizeDelta, 6).toFixed(2),\n        toNumber(order.price, 10),\n      ])\n\n      const logs = tableData.map(row => {\n        const [pair, side, type, size, price] = row\n        return `${pair} (${side}, ${String(type).toLowerCase()}) order: ${size}$ at ${price}$`\n      })\n\n      if (callback) {\n        callback({ text: `Orders\\n----------------------------\\n${logs.join(\"\\n\")}` });\n      }\n      elizaLogger.info(\"Successfully get orders\");\n      return true\n    } catch (error) {\n      elizaLogger.error(\"Error during get orders:\", { message: error.message });\n      if (callback) {\n        callback({ text: `Error during get orders: ${error.message}` });\n      }\n      return false\n    }\n  },\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport type{\n\tActionExample,\n\tHandlerCallback,\n\tIAgentRuntime,\n\tMemory,\n\tState,\n\tAction,\n} from \"@elizaos/core\";\nimport { checkEnv, newMerkleService } from \"../utils\";\nimport { calcPnlWithoutFee, dec, div, fromNumber, toNumber } from \"@merkletrade/ts-sdk\";\n\nexport default {\n  name: \"GET_POSITION\",\n  similes: [\"POSITION\"],\n  description: \"Get the position of the user on the Merkle Trade platform\",\n  examples: [\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"Get the position of the user on the Merkle Trade platform\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Positions\\n----------------------------\\nETH (50x Long)\\nAvg Price: 2783.714542352$\\nCollateral: 19.417476$\\nPnL: -37.36% (-7.26$)\",\n          action: \"GET_POSITION\",\n        },\n      }\n    ]\n  ] as ActionExample[][],\n  validate: async (runtime: IAgentRuntime) => {\n    return checkEnv(runtime);\n  },\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const merkleService = await newMerkleService(runtime)\n\n      const positions = await merkleService.getPositions()\n      if (!positions) {\n        throw new Error(\"Positions not found\")\n      }\n\n      const summary = await merkleService.getSummary()\n      if (!summary) {\n        throw new Error(\"Summary not found\")\n      }\n\n      const logs = [\n        \"Positions\",\n        ...positions.map(position => {\n        const pair = position.pairType.split(\"::\")[2].split(\"_\")[0]\n        const side = position.isLong ? \"Long\" : \"Short\"\n        const collateral = toNumber(position.collateral, 6)\n        const leverage = Math.round(toNumber(position.size, 6) / collateral)\n        const currentPrice = fromNumber(summary.prices.find(price => price.id.includes(pair))?.price, 10)\n        const avgPrice = toNumber(position.avgPrice, 10).toFixed(2)\n        const pnl = toNumber(calcPnlWithoutFee({\n          position: position,\n          executePrice: currentPrice,\n          decreaseOrder: { sizeDelta: position.size}\n        }), 6)\n        const pnlRate = ((pnl / collateral) * 100).toFixed(2)\n        return `${pair} (${leverage}x ${side})\\nAvg Price: ${avgPrice}$\\nCollateral: ${collateral.toFixed(2)}$\\nPnL: ${pnlRate}% (${pnl.toFixed(2)}$)`\n      })\n      ].join(\"\\n----------------------------\\n\")\n\n      if (callback) {\n        callback({ text: logs });\n      }\n      elizaLogger.info(\"Successfully get orders\");\n      return true\n    } catch (error) {\n      elizaLogger.error(\"Error during get orders:\", { message: error.message });\n      if (callback) {\n        callback({ text: `Error during get orders: ${error.message}` });\n      }\n      return false\n    }\n  },\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport type {\n\tActionExample,\n\tHandlerCallback,\n\tIAgentRuntime,\n\tMemory,\n\tState,\n\tAction,\n} from \"@elizaos/core\";\nimport { checkEnv, newMerkleService } from \"../utils\";\nimport { toNumber } from \"@merkletrade/ts-sdk\";\n\nexport default {\n  name: \"GET_BALANCE\",\n  similes: [\"BALANCE\"],\n  description: \"Get the balance of the user on the Merkle Trade platform\",\n  examples: [\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"What is my balance?\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"Balance:\\nUSDC\\t|\\t1000000\",\n          action: \"GET_BALANCE\",\n        },\n      }\n    ]\n  ] as ActionExample[][],\n  validate: async (runtime: IAgentRuntime) => {\n    return checkEnv(runtime);\n  },\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const merkleService = await newMerkleService(runtime)\n\n      const balance = await merkleService.getBalance()\n      if (!balance) {\n        throw new Error(\"Balance not found\")\n      }\n      const usdc = toNumber(balance.usdc, 6)\n      if (callback) {\n        callback({ text: `Balance:\\nUSDC\\t|\\t${usdc}` });\n      }\n      elizaLogger.info(\"Successfully get balance\");\n      return true\n    } catch (error) {\n      elizaLogger.error(\"Error during get balance:\", {\n        message: error.message,\n      });\n      if (callback) {\n        callback({\n          text: `Error during get balance: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false\n    }\n  },\n} as Action;\n","import { elizaLogger, generateObjectDeprecated } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\ttype Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { GetPriceSchema } from \"../types\";\nimport { checkEnv, newMerkleService } from \"../utils\";\n\nconst getPriceTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"coinSymbol\": \"BTC\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested futures position order:\n- coinSymbol : Coin symbol (Must be a valid coin symbol, Must be provided by the user)\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n\tname: \"GET_PRICE\",\n\tsimiles: [\"PRICE\"],\n\tdescription: \"Get the price of the coin on the Merkle Trade platform\",\n\texamples: [\n    [\n      {\n        user: \"{{user}}\",\n        content: {\n          text: \"What is the price of BTC?\",\n        },\n      },\n      {\n        user: \"{{agent}}\",\n        content: {\n          text: \"The price of BTC is 98000\",\n          action: \"GET_PRICE\",\n        },\n      },\n    ]\n\t] as ActionExample[][],\n\tvalidate: async (runtime: IAgentRuntime) => {\n\t\treturn checkEnv(runtime);\n\t},\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    let content: any;\n    try {\n      let currentState = state;\n      if (!currentState) {\n        currentState = (await runtime.composeState(message)) as State;\n      } else {\n        currentState = await runtime.updateRecentMessageState(currentState);\n      }\n\n      const context = composeContext({\n        state: currentState,\n        template: getPriceTemplate,\n      });\n\n      content = await generateObjectDeprecated({\n        runtime,\n        context: context,\n        modelClass: ModelClass.SMALL,\n      });\n\n      const parseResult = GetPriceSchema.safeParse(content);\n      if (!parseResult.success) {\n        throw new Error(\n          `Invalid get price content:\\n${JSON.stringify(content, null, 2)}\\n${JSON.stringify(parseResult.error.errors, null, 2)}`\n        );\n      }\n\n      const merkleService = await newMerkleService(runtime)\n      const summary = await merkleService.getSummary()\n      if (!summary) {\n        throw new Error(\"Summary not found\")\n      }\n\n      const price = summary.prices.find(price => price.id.includes(content.coinSymbol))\n      if (!price) {\n        throw new Error(\"Price not found\")\n      }\n\n      if (callback) {\n        callback({\n          text: `The price of ${content.coinSymbol} is ${price.price}`,\n          content: price,\n        });\n      }\n      elizaLogger.info(\"Successfully get price\");\n      return true;\n    } catch (error) {\n      elizaLogger.error(\"Error during get price:\", {\n        message: error.message,\n      });\n      if (callback) {\n        callback({\n          text: `Error during get price: ${error.message}`,\n          content: { error: error.message },\n        });\n      }\n      return false;\n    }\n\t},\n} as Action;\n","import type { Plugin } from \"@elizaos/core\";\nimport openOrder from \"./actions/openOrder\";\nimport fullyClosePosition from \"./actions/fullyClosePosition\";\nimport getOrder from \"./actions/getOrder\";\nimport getPosition from \"./actions/getPosition\";\nimport getBalance from \"./actions/getBalance\";\nimport getPrice from \"./actions/getPrice\";\n\nconst merklePlugin: Plugin = {\n\tname: \"merkle\",\n\tdescription: \"Merkle Plugin for Eliza\",\n\tactions: [openOrder, fullyClosePosition, getOrder, getPosition, getBalance, getPrice],\n\tevaluators: [],\n  services: [],\n\tproviders: [],\n};\n\nexport * from \"./service\";\nexport * from \"./utils\";\nexport { merklePlugin };\nexport default merklePlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","generateObjectDeprecated","ModelClass","composeContext","composeContext","generateObjectDeprecated","ModelClass","elizaLogger","elizaLogger","elizaLogger","elizaLogger","fromNumber","toNumber","elizaLogger","elizaLogger","toNumber","elizaLogger","elizaLogger","generateObjectDeprecated","ModelClass","composeContext","composeContext","generateObjectDeprecated","ModelClass","price","elizaLogger"]}